var documenterSearchIndex = {"docs":
[{"location":"api/#FRAC.jl-API-Reference","page":"API","title":"FRAC.jl API Reference","text":"","category":"section"},{"location":"api/#Problem-Definition","page":"API","title":"Problem Definition","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"define_problem(...)   Construct a FRACProblem with your data, covariates, and settings.\nFRACProblem   Holds data, formulas, and estimation results.","category":"page"},{"location":"api/#Estimation-and-Debiasing","page":"API","title":"Estimation & Debiasing","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"estimate!(problem)   Run IV or GMM estimation (unconstrained or constrained).\nbootstrap!(problem; nboot, approximate)   Perform bootstrap standard errors and optional debiasing.\nget_FEs!(problem)   Extract estimated fixed effects.","category":"page"},{"location":"api/#Elasticity-Calculations","page":"API","title":"Elasticity Calculations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"price_elasticities!(problem; monte_carlo_draws, ...)   Compute and store all own‑ and cross‑price elasticities.\ninner_price_elasticities(...)   Helper for one product’s partial elasticities.\nall_elasticities(...)   Internal: generate individual elasticity draws.\nget_elasticities(problem, [i, j])   Extract elasticity of product i w.r.t. price j.\nown_elasticities(problem)   Return a DataFrame of own‑price elasticities.\ncorrelate_draws(...)   Inject covariance among random‐coefficient draws.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [FRAC]\nOrder = [\n    define_problem,\n    estimate!,\n    bootstrap!,\n    get_FEs!,\n    price_elasticities!,\n    inner_price_elasticities,\n    all_elasticities,\n    get_elasticities,\n    own_elasticities,\n    correlate_draws,\n    HaltonDraws!,\n    HaltonSeq!,\n    pre_absorb\n]","category":"page"},{"location":"usage/#Getting-Started-with-FRACDemand","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"FRACDemand provides tools to estimate random-coefficients demand models via a fixed-rank contraction approximation. Below is a basic workflow; for detailed demos see examples/.","category":"page"},{"location":"usage/#0.-Installation","page":"Getting Started with FRACDemand","title":"0. Installation","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"] add FRACDemand","category":"page"},{"location":"usage/#1.-Simulate-synthetic-demand","page":"Getting Started with FRACDemand","title":"1. Simulate synthetic demand","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"using FRACDemand, Random, DataFrames, Plots\n\ndf = sim_logit_vary_J(\n  2, 4,                 # min and max products per market\n  500, 1,               # T markets, B time periods\n  [-1.0, 1.5],          # true β_prices, β_x\n  [0.5 0.3; 0.3 0.8],   # true covariance matrix\n  0.3,                  # market‐level shock variance\n  with_market_FEs = true\n)","category":"page"},{"location":"usage/#2.-Define-and-estimate-the-model","page":"Getting Started with FRACDemand","title":"2. Define and estimate the model","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"problem = define_problem(\n  data          = df,\n  linear        = [\"prices\", \"x\"],\n  nonlinear     = [\"prices\", \"x\"],\n  cov           = [(\"prices\",\"x\")],\n  fixed_effects = [\"market_ids\"],\n  se_type       = \"bootstrap\"\n)\n\nestimate!(problem)","category":"page"},{"location":"usage/#3.-Bootstrap-standard-errors","page":"Getting Started with FRACDemand","title":"3. Bootstrap standard errors","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"The bootstrap! function will run a bootstrap procedure to debias the original parameter estimates. The approximate determines whether the residuals are constructed from the FRAC approximation (true) or the full BLP contraction mapping (false). The nboot argument specifies the number of bootstrap draws.","category":"page"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"    bootstrap!(problem; nboot = 200, approximate=true)\n    @show problem.bootstrap_debiased_parameters","category":"page"},{"location":"usage/#4.-Compute-and-extract-elasticities","page":"Getting Started with FRACDemand","title":"4. Compute and extract elasticities","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"price_elasticities!(problem; monte_carlo_draws=100)\nown_df = own_elasticities(problem)","category":"page"},{"location":"usage/#5.-Visualize-results","page":"Getting Started with FRACDemand","title":"5. Visualize results","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"using Plots\nhistogram(\n  own_df.own_elasticities,\n  bins = 30,\n  title = \"Own‑Price Elasticities\",\n  xlabel = \"Elasticity\",\n  ylabel = \"Frequency\"\n)","category":"page"},{"location":"usage/#5.-Full-example-scripts","page":"Getting Started with FRACDemand","title":"5. Full example scripts","text":"","category":"section"},{"location":"usage/","page":"Getting Started with FRACDemand","title":"Getting Started with FRACDemand","text":"julia examples/simulate_estimate_distribution.jl\njulia examples/simulate_compare_elasticities.jl","category":"page"},{"location":"theory/#Fast,-Robust-and-Approximately-Correct-(FRAC)-Estimation-of-the-BLP-Model","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"","category":"section"},{"location":"theory/#1.-Background:-The-Standard-BLP-Framework","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"1. Background: The Standard BLP Framework","text":"","category":"section"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"Berry, Levinsohn & Pakes (1995) propose a random‐coefficients logit model of differentiated‐product demand.  Key objects:","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"Market shares: s_jt for product j in market t, and an outside good share s_0t.\nMean individual-level utilities: delta_ijt = X_jt^topbeta + xi_jt + Sigma_k sigma_k x_jkt v_ikt, with idiosyncratic shocks varepsilon_ijt\nEndogeneity: Prices (and possibly other characteristics) are correlated with unobserved quality xi_jt","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"BLP solves a fixed point problem to invert shares to mean utilities delta_jt, then estimates beta sigma by GMM using instruments for endogenous covariates Z_jt  This is powerful but computationally expensive because each objective‐function evaluation requires many evaluations of the contraction mapping, and because that contraction requires integrating over potentially many dimensions of random coefficients.","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"","category":"page"},{"location":"theory/#2.-FRAC:-A-Second-Order-Approximation","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"2. FRAC: A Second-Order Approximation","text":"","category":"section"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"FRAC sidesteps repeated inversions by approximating the individual share function around the population mean of the random coefficients.  A second-order Taylor expansion yields","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"$","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"\\log!\\left(\\frac{s{jt}}{s{0t}}\\right) \\;\\approx\\; X{jt}^\\top\\beta\\; +\\; \\underbrace{\\tfrac12\\,X{jt}^\\top\\Sigma X{jt}}{\\text{quadratic term}} \\; +\\; e{jt}^\\top\\xi{t} + \\varepsilon_{jt}, $","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"where the quadratic term can be written as a linear combination of artificial regressors K_mn^jit constructed from product characteristics.","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"Crucially, after augmentation the model becomes linear in the unknown parameters beta and the non-zero elements of Sigma.  Estimation therefore reduces to (instrumented) least-squares rather than nested fixed-point GMM.","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"","category":"page"},{"location":"theory/#3.-Estimation-via-Algorithm-1-from-Salanie-and-Wolak-(2022)","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"3. Estimation via Algorithm 1 from Salanie & Wolak (2022)","text":"","category":"section"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"Construct dependent variable For each market t, stack the original (s_1tldotss_Jt) with the outside share to obtain (S_0tS_1tldotsS_Jt)\nForm regressors for every product–market pair (jt)\nCompute the market-share-weighted means of characteristics: e_t = sum_k=1^J S_kt X_kt\nFor every index pair (mn) in the set of unique characteristic pairs mathcal I:\nDiagonal (m=n): K^jit_mm = bigl( x_jtm2 - e_tm bigr) X_jtm\nOff-diagonal (nm): K^jit_mn = X_jtm X_jtn - e_tm X_jtn - e_tn X_jtm\nDefine the dependent variable y_jt = log(S_jtS_0t)\nTwo-Stage Least Squares (2SLS) Regress y on the stacked matrix XK, instrumenting each column with flexible functions of the excluded instruments Z.  Denote the coefficient vector as widehatbeta (elements on X) and widehatSigma (non-zero elements on K).\n(Optional) Three-Stage Least Squares (3SLS) To pool information across markets, run a 3SLS over the stacked J equations, using the residual variance–covariance from Step 3 as a weighting matrix.","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"Because every step is linear, computation is orders of magnitude faster than full BLP estimation, with negligible loss in accuracy for moderate random-coefficient variance.","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"","category":"page"},{"location":"theory/#4.-Why-Debias?-The-Bootstrap-Correction","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"4. Why Debias?  The Bootstrap Correction","text":"","category":"section"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"The second-order expansion neglects higher-order terms, so widehatSigma is approximately unbiased only when random-coefficient variation is small.  To correct the remaining bias Fox et al. propose a parametric bootstrap:","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"Simulate artificial markets using the fitted parameters (widehatbeta widehatSigma) and the original instruments and characteristics.  Draw individual tastes v_i from their assumed distribution, compute true BLP shares, and generate “pseudo‐data.”\nRe-estimate FRAC on each bootstrap draw to obtain widehattheta^*(b)\nBias‐correct the original estimator:\n$\n\\theta^C \\;=\\; 2\\,\\widehat\\theta \\;-\\;\\frac{1}{B}\\sum_{b=1}^B \\widehat\\theta^{*(b)}, $\nwhere theta^C is the bias‐corrected parameter vector.\nInference: Use the distribution of widehattheta^*(b) - overlinewidehattheta^* to construct confidence intervals that account for both sampling error and approximation error.","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"In practice 200–500 bootstrap replications suffice, and because each replication is just another FRAC run, the full bias-corrected procedure is still dramatically faster than one iteration of the nested fixed-point estimator.","category":"page"},{"location":"theory/","page":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","title":"Fast, Robust and Approximately Correct (FRAC) Estimation of the BLP Model","text":"","category":"page"},{"location":"examples/#Examples-Gallery","page":"Examples Gallery","title":"Examples Gallery","text":"","category":"section"},{"location":"examples/","page":"Examples Gallery","title":"Examples Gallery","text":"Below is a quick overview of the Julia scripts in examples/:","category":"page"},{"location":"examples/","page":"Examples Gallery","title":"Examples Gallery","text":"example1.jl   A basic end‑to‑end workflow: simulate data, estimate FRAC (constrained vs unconstrained), compute elasticities, compare to logit.  \nsimulateestimatedistribution.jl   Runs multiple sims to show distribution of parameter estimates versus true values.  \nsimulatecompareelasticities.jl   Compares MSE and MAPE of estimated price elasticities with and without a covariance IV.  \ntesting_debias.jl   Demonstrates bootstrap standard errors and debiasing for the unconstrained estimator.  ","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#1.-“Constraints-not-yet-implemented-with-correlated-random-coefficients”","page":"Troubleshooting","title":"1. “Constraints not yet implemented with correlated random coefficients”","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure cov is empty or remove covariance pairs when using constrained = true.","category":"page"},{"location":"troubleshooting/#2.-Cluster‐robust-SE-error","page":"Troubleshooting","title":"2. Cluster‐robust SE error","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If se_type = \"cluster\", you must supply cluster_var = \"<column_name>\".","category":"page"},{"location":"troubleshooting/#3.-Out‐of‐memory-on-large-Monte‐Carlo-draws","page":"Troubleshooting","title":"3. Out‐of‐memory on large Monte‐Carlo draws","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use common_draws = true in price_elasticities! or reduce monte_carlo_draws.  ","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For everything else open an issue:   https://github.com/jamesbrand/FRAC.jl/issues","category":"page"},{"location":"#FRACDemand","page":"Home","title":"FRACDemand","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Documentation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: This documentation is new and has been prepared with a lot of help from LLMs, so apologies for errors and omissions. If you find any, please open an issue on GitHub or submit a pull request.","category":"page"},{"location":"","page":"Home","title":"Home","text":"FRACDemand is a Julia package for estimating random-coefficients demand models (BLP-style) using a fixed-rank approximation of contraction mappings. It provides:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Flexible specification of utility function in mixed logit models\nFixed effects and robust standard errors  \nBootstrap debiasing and Monte Carlo elasticity computations  \nPrice elasticities and predicted market shares\nEasy exporting to PyBLP","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is meant to make the estimation of mixed logit models (with market level data) and the resulting price elasticities trivially easy. The package estimates an approximation of these models which was developed by Salanie and Wolak (2022).","category":"page"},{"location":"","page":"Home","title":"Home","text":"In many cases, the approximation offered by the package is sufficient to estimate price elasticities reasonably accurately. In other cases, results from FRAC.jl may be used as a starting point for other packages, such as PyBLP. The estimation results are saved in a dictionary for ease of reading and saving.   ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> problem.estimated_parameters\nDict{Any, Any} with 4 entries:\n  :β_x       => 1.00785\n  :σ2_x      => -0.0500151\n  :β_prices  => -1.0184\n  :σ2_prices => 0.0839573","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Installation: ] add FRACDemand  \nAPI Reference: docs/src/api.md  \nUsage Examples: docs/src/usage.md and docs/src/examples.md","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# From the REPL:\n] add FRACDemand","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using FRACDemand, DataFrames, CSV\n\n# 1. Define your problem\nproblem = define_problem(\n  data          = your_df,               \n  linear        = [\"prices\", \"x\"],\n  nonlinear     = [\"prices\", \"x\"],\n  fixed_effects = [\"market_ids\"],\n  se_type       = \"bootstrap\"\n)\n\n# 2. Estimate parameters\nestimate!(problem)\n\n# 3. Compute price elasticities\nprice_elasticities!(problem; monte_carlo_draws=100)\nown_df = own_elasticities(problem)","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Unconstrained IV‑style FRAC approximation  \nGMM‑based constrained estimation  \nSupport for random coefficients & covariance terms  \nFlexible standard errors: simple, robust, cluster, bootstrap  \nBuilt‑in Monte Carlo price elasticities  \nEasy export to CSV / PyBLP workflows  ","category":"page"},{"location":"#Next-Steps","page":"Home","title":"Next Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"📖 Usage Example  \n⚙️ API Reference  \n🔧 Examples Gallery  \n❗ Troubleshooting  \n📚 Theory   ","category":"page"},{"location":"#Passing-results-to-PyBLP","page":"Home","title":"Passing results to PyBLP","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Results can be saved to CSV and used in Python for PyBLP. Note that Python may not handle Unicode dictionary keys; you may want to rename entries. Example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Save results in Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"frac_results = problem.estimated_parameters\n# ... rename keys if needed ...\nCSV.write(\"frac_results.csv\", frac_results)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Load in Python:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import pyblp \nimport pandas as pd\nimport numpy as np \n\nfrac_results = pd.read_csv(\"frac_results.csv\", header = False)\nfrac_sigma = np.zeros((2,2))\nfrac_sigma[0,0] = np.sqrt(frac_results[\"sigmaSquared_x\"])\nfrac_sigma[1,1] = np.sqrt(frac_results[\"sigmaSquared_prices\"])\n\nX1 = pyblp.Formulation(\"1 + x + prices\")\nX2 = pyblp.Formulation(\"0 + x + prices\")\n\nproblem = pyblp.Problem((X1, X2), product_data)\n\nproblem.solve(sigma = frac_sigma)","category":"page"}]
}
