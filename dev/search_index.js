var documenterSearchIndex = {"docs":
[{"location":"api/#FRAC.jl-API-Reference","page":"API","title":"FRAC.jl API Reference","text":"","category":"section"},{"location":"api/#Problem-Definition","page":"API","title":"Problem Definition","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"define_problem(...)   Construct a FRACProblem with your data, covariates, and settings.\nFRACProblem   Holds data, formulas, and estimation results.","category":"page"},{"location":"api/#Estimation-and-Debiasing","page":"API","title":"Estimation & Debiasing","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"estimate!(problem)   Run IV or GMM estimation (unconstrained or constrained).\nbootstrap!(problem; nboot, approximate)   Perform bootstrap standard errors and optional debiasing.\nget_FEs!(problem)   Extract estimated fixed effects.","category":"page"},{"location":"api/#Elasticity-Calculations","page":"API","title":"Elasticity Calculations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"price_elasticities!(problem; monte_carlo_draws, ...)   Compute and store all own‑ and cross‑price elasticities.\ninner_price_elasticities(...)   Helper for one product’s partial elasticities.\nall_elasticities(...)   Internal: generate individual elasticity draws.\nget_elasticities(problem, [i, j])   Extract elasticity of product i w.r.t. price j.\nown_elasticities(problem)   Return a DataFrame of own‑price elasticities.\ncorrelate_draws(...)   Inject covariance among random‐coefficient draws.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [FRAC]\nOrder = [\n    define_problem,\n    estimate!,\n    bootstrap!,\n    get_FEs!,\n    price_elasticities!,\n    inner_price_elasticities,\n    all_elasticities,\n    get_elasticities,\n    own_elasticities,\n    correlate_draws,\n    HaltonDraws!,\n    HaltonSeq!,\n    pre_absorb\n]","category":"page"},{"location":"usage/#Usage-Example","page":"Usage Example","title":"Usage Example","text":"","category":"section"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"This page shows a minimal end‑to‑end workflow. For extended demos, see examples/.","category":"page"},{"location":"usage/#1.-Simulate-synthetic-demand","page":"Usage Example","title":"1. Simulate synthetic demand","text":"","category":"section"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"using FRAC, Random, DataFrames, Plots\n\ndf = sim_logit_vary_J(\n  2, 4,                 # min and max products per market\n  500, 1,               # T markets, B time periods\n  [-1.0, 1.5],          # true β_prices, β_x\n  [0.5 0.3; 0.3 0.8],   # true covariance matrix\n  0.3,                  # market‐level shock variance\n  with_market_FEs = true\n)","category":"page"},{"location":"usage/#2.-Define-and-estimate-the-model","page":"Usage Example","title":"2. Define and estimate the model","text":"","category":"section"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"problem = define_problem(\n  data          = df,\n  linear        = [\"prices\", \"x\"],\n  nonlinear     = [\"prices\", \"x\"],\n  cov           = [(\"prices\",\"x\")],\n  fixed_effects = [\"market_ids\"],\n  se_type       = \"bootstrap\"\n)\n\nestimate!(problem)","category":"page"},{"location":"usage/#3.-Bootstrap-standard-errors","page":"Usage Example","title":"3. Bootstrap standard errors","text":"","category":"section"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"The bootstrap! function will run a bootstrap procedure to debias the original parameter estimates. The approximate determines whether the residuals are constructed from the FRAC approximation (true) or the full BLP contraction mapping (false). The nboot argument specifies the number of bootstrap draws.","category":"page"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"    bootstrap!(problem; nboot = 200, approximate=true)\n    @show problem.bootstrap_debiased_parameters","category":"page"},{"location":"usage/#4.-Compute-and-extract-elasticities","page":"Usage Example","title":"4. Compute and extract elasticities","text":"","category":"section"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"price_elasticities!(problem; monte_carlo_draws=100)\nown_df = own_elasticities(problem)","category":"page"},{"location":"usage/#5.-Visualize-results","page":"Usage Example","title":"5. Visualize results","text":"","category":"section"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"using Plots\nhistogram(\n  own_df.own_elasticities,\n  bins = 30,\n  title = \"Own‑Price Elasticities\",\n  xlabel = \"Elasticity\",\n  ylabel = \"Frequency\"\n)","category":"page"},{"location":"usage/#5.-Full-example-scripts","page":"Usage Example","title":"5. Full example scripts","text":"","category":"section"},{"location":"usage/","page":"Usage Example","title":"Usage Example","text":"julia examples/simulate_estimate_distribution.jl\njulia examples/simulate_compare_elasticities.jl","category":"page"},{"location":"theory/","page":"-","title":"-","text":"<!– To be filled –>","category":"page"},{"location":"examples/#Examples-Gallery","page":"Examples Gallery","title":"Examples Gallery","text":"","category":"section"},{"location":"examples/","page":"Examples Gallery","title":"Examples Gallery","text":"Below is a quick overview of the Julia scripts in examples/:","category":"page"},{"location":"examples/","page":"Examples Gallery","title":"Examples Gallery","text":"example1.jl   A basic end‑to‑end workflow: simulate data, estimate FRAC (constrained vs unconstrained), compute elasticities, compare to logit.  \nsimulateestimatedistribution.jl   Runs multiple sims to show distribution of parameter estimates versus true values.  \nsimulatecompareelasticities.jl   Compares MSE and MAPE of estimated price elasticities with and without a covariance IV.  \ntesting_debias.jl   Demonstrates bootstrap standard errors and debiasing for the GMM‐constrained estimator.  ","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#1.-“Constraints-not-yet-implemented-with-correlated-random-coefficients”","page":"Troubleshooting","title":"1. “Constraints not yet implemented with correlated random coefficients”","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure cov is empty or remove covariance pairs when using constrained = true.","category":"page"},{"location":"troubleshooting/#2.-Cluster‐robust-SE-error","page":"Troubleshooting","title":"2. Cluster‐robust SE error","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If se_type = \"cluster\", you must supply cluster_var = \"<column_name>\".","category":"page"},{"location":"troubleshooting/#3.-Out‐of‐memory-on-large-Monte‐Carlo-draws","page":"Troubleshooting","title":"3. Out‐of‐memory on large Monte‐Carlo draws","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Use common_draws = true in price_elasticities! or reduce monte_carlo_draws.  ","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For everything else open an issue:   https://github.com/jamesbrand/FRAC.jl/issues","category":"page"},{"location":"#FRACDemand.jl","page":"Home","title":"FRACDemand.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Documentation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is meant to make the estimation of mixed logit models (with market level data) and the resulting price elasticities trivially easy. The package estimates an approximation of these models which was developed by Salanie and Wolak (2022).","category":"page"},{"location":"","page":"Home","title":"Home","text":"In many cases, the approximation offered by the package is sufficient to estimate price elasticities reasonably accurately. In other cases, results from FRAC.jl may be used as a starting point for other packages, such as PyBLP. The estimation results are saved in a dictionary for ease of reading and saving.   ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> problem.estimated_parameters\nDict{Any, Any} with 4 entries:\n  :β_x       => 1.00785\n  :σ2_x      => -0.0500151\n  :β_prices  => -1.0184\n  :σ2_prices => 0.0839573","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# From the REPL:\n] add FRAC","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using FRACDemand, DataFrames, CSV\n\n# 1. Define your problem\nproblem = define_problem(\n  data          = your_df,               \n  linear        = [\"prices\", \"x\"],\n  nonlinear     = [\"prices\", \"x\"],\n  fixed_effects = [\"market_ids\"],\n  se_type       = \"bootstrap\"\n)\n\n# 2. Estimate parameters\nestimate!(problem)\n\n# 3. Compute price elasticities\nprice_elasticities!(problem; monte_carlo_draws=100)\nown_df = own_elasticities(problem)","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Unconstrained IV‑style FRAC approximation  \nGMM‑based constrained estimation  \nSupport for random coefficients & covariance terms  \nFlexible standard errors: simple, robust, cluster, bootstrap  \nBuilt‑in Monte Carlo price elasticities  \nEasy export to CSV / PyBLP workflows  ","category":"page"},{"location":"#Next-Steps","page":"Home","title":"Next Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"📖 Usage Example  \n⚙️ API Reference  \n🔧 Examples Gallery  \n❗ Troubleshooting  \n📚 Theory   ","category":"page"},{"location":"#Passing-results-to-PyBLP","page":"Home","title":"Passing results to PyBLP","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You should be able to save the results as a .csv file using the CSV package. The results can then be loaded in python and passed directly to PyBLP. The only caveat is that my understanding is that people don't like to use unicode characters in python as much as is done in Julia, so you may want to rename the results. An example workflow below:   Save results in Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"frac_results = problem.estimated_parameters;\n# .... rename dictionary entries as desired\nCSV.write(\"frac_results.csv\", frac_results)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Load in Python:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import pyblp \nimport pandas as pd\nimport numpy as np \n\nfrac_results = pd.read_csv(\"frac_results.csv\", header = False)\nfrac_sigma = np.zeros((2,2))\nfrac_sigma[0,0] = np.sqrt(frac_results[\"sigmaSquared_x\"])\nfrac_sigma[1,1] = np.sqrt(frac_results[\"sigmaSquared_prices\"])\n\nX1 = pyblp.Formulation(\"1 + x + prices\")\nX2 = pyblp.Formulation(\"0 + x + prices\")\n\nproblem = pyblp.Problem((X1, X2), product_data)\n\nproblem.solve(sigma = frac_sigma)","category":"page"}]
}
